#+TITLE: Try Configurations

Open this file in Emacs and press =C-c C-c= while your cursor is on a source
block.  You can also evaluate individual S-expressions by using =C-x C-e=.

Each of the configs from each section can be used standalone.

* Babel
#+begin_src emacs-lisp :tangle elisp/babel-config.el
;; Activate languages for executing source blocks
(org-babel-do-load-languages 'org-babel-load-languages
			     '((shell . t)
			       (python . t)))

;; Get rid of the prompt that asks us if we want to evaluate code blocks
(setq org-confirm-babel-evaluate nil)

;; Disable automatic execution when exporting
;; (setq org-export-use-babel nil)

;; Use python3 as the interpreter for python source blocks
(custom-set-variables '(org-babel-python-command "python3"))
#+end_src
* Org exporting
#+begin_src emacs-lisp :tangle "elisp/org-export-config.el"
;; Package bootstrap
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/") t)
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

;; Actual org export config (Adds four formats and htmlize for code coloring in
;; all export formats.
(use-package ox-gfm :ensure t)
(use-package ox-rst :ensure t)
(use-package ox-twbs :ensure t)
(use-package ox-reveal :ensure t
  :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
(use-package htmlize :ensure t)
#+end_src
* Agenda
#+begin_src emacs-lisp :tangle "elisp/org-agenda-config.el"
;; Set cross-platform directory : ~/Documents/gtd
(cond ((string-equal system-type "windows-nt")
       (progn (setq org-agenda-dir "c:\\Users\\phil1\\Documents\\gtd")))
      ((string-equal system-type "darwin")
       (progn (setq org-agenda-dir "~/Documents/gtd/")))
      ((string-equal system-type "gnu/linux")
       (progn (setq org-agenda-dir "~/Documents/gtd/"))))
(setq org-agenda-files (list org-agenda-dir))

;; Nicer vertical alignment in the agenda
(setq org-agenda-prefix-format  '((agenda . "%-12t%-12s")))

;; Use agenda files as refile targets
(setq org-refile-targets '((nil :maxlevel . 3) (org-agenda-files :maxlevel . 3)))
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file)

#+end_src
** Addons
#+begin_src emacs-lisp :tangle "elisp/org-agenda-addons.el"
;; Define new TODO keywords
(setq org-todo-keywords 
      '((sequence "TODO" "WAITING" "VERIFY" "|" "DONE")
        (sequence "GTD-IN(i)" "GTD-CLARIFY(c)" "GTD-PROJECT(p)"
                  "GTD-SOMEDAY-MAYBE(s)" "GTD-ACTION(a)" "GTD-NEXT-ACTION(n)"
                  "GTD-WAITING(w)" "|" "GTD-REFERENCE(r)"
                  "GTD-DELEGATED(g)" "GTD-DONE(d)")))

;; Set their face properties
(setq org-todo-keyword-faces
      '(("GTD-IN" :foreground "#ff8800" :weight normal :underline t :size small)
        ("GTD-PROJECT" :foreground "#0088ff" :weight bold :underline t)
        ("GTD-ACTION" :foreground "#0088ff" :weight normal :underline nil)
        ("GTD-NEXT-ACTION" :foreground "#0088ff" :weight bold :underline nil)
        ("GTD-WAITING" :foreground "#aaaa00" :weight normal :underline nil)
        ("GTD-REFERENCE" :foreground "#00ff00" :weight normal :underline nil)
        ("GTD-SOMEDAY-MAYBE" :foreground "#7c7c74" :weight normal :underline nil)
        ("GTD-DONE" :foreground "#00ff00" :weight normal :underline nil)))
#+end_src
* Fast notes
#+begin_src emacs-lisp :tangle "elisp/fast-notes.el"
;; A platform independant directory for orgmode files
(cond ((string-equal system-type "windows-nt")
       (progn (setq org-agenda-dir "c:\\Users\\phil1\\Documents\\gtd")))
      ((string-equal system-type "darwin")
       (progn (setq org-agenda-dir "~/Documents/gtd/")))
      ((string-equal system-type "gnu/linux")
       (progn (setq org-agenda-dir "~/Documents/gtd/"))))
(setq org-agenda-files (list org-agenda-dir))

;; Defining symbols for important files
(setq gtd-in-tray-file (concat org-agenda-dir "GTD_InTray.org")
      gtd-project-list-file (concat org-agenda-dir "GTD_ProjectList.org")
      gtd-reference-file (concat org-agenda-dir "GTD_Reference.org"))

;; Individual functions for those files
;; These names are displayed in the which-key popup
(defun gtd-open-in-tray      () (interactive) (find-file gtd-in-tray-file))
(defun gtd-open-project-list () (interactive) (find-file gtd-project-list-file))
(defun gtd-open-reference   () (interactive) (find-file gtd-reference-file))

(define-prefix-command 'leader-key)
(global-set-key (kbd "M-m") 'leader-key)

(define-prefix-command 'gtd)
(define-key leader-key (kbd "g") 'gtd)

(define-key gtd (kbd "c") 'org-capture)
(define-key gtd (kbd "i") 'gtd-open-in-tray)
(define-key gtd (kbd "p") 'gtd-open-project-list)
(define-key gtd (kbd "r") 'gtd-open-reference)

(setq org-capture-templates
      '(("i" "GTD Input" entry (file gtd-in-tray-file)
	 "* GTD-IN %?\n %i\n %a" :kill-buffer t)
	("c" "Emacs config" entry (file emacs-config-file)
	 "* GTD-IN %?\n %i\n %a" :kill-buffer t)))
#+end_src
* Helpers
#+begin_src emacs-lisp :tangle "elisp/helpers.el"
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

(use-package helm :ensure t
  :config
  (require 'helm-config)
  (helm-mode 1)
  :bind (("M-x" . helm-M-x)
	 ("C-x C-f" . helm-find-files)
	 ("C-x C-r" . helm-recentf)
	 ("C-h C-i" . helm-info)
	 ("C-x C-b" . helm-buffers-list)
	 ("C-c g" . helm-grep-do-git-grep)))

(use-package which-key
  :ensure t
  :delight
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  (setq which-key-idle-delay 0.01)
  :config
  (which-key-mode))
(use-package company
  :ensure t
  :config (global-company-mode)
  (setq company-idle-delay 0))
#+end_src
* Basic configs
#+begin_src emacs-lisp :tangle "elisp/basic-configs.el"
;; Looks
(setq inhibit-startup-screen t)
(setq inhibit-startup-buffer-menu t)
;; (tool-bar-mode -1)
(scroll-bar-mode -1)
(custom-set-variables '(custom-enabled-themes '(misterioso)))
;; Orgmode looks
(custom-set-variables '(org-startup-with-inline-images t))
(custom-set-variables '(org-image-actual-width 100))
(custom-set-variables '(org-startup-folded t))
(use-package org-bullets :ensure t :hook (org-mode . org-bullets-mode))
;; Disable weird autoindent behaviors in orgmode
(add-hook 'org-mode-hook (lambda () (electric-indent-mode 0)))
(setq org-edit-src-content-indentation 0)

;; Cursor
(custom-set-variables '(cursor-type '(bar . 4)))
(custom-set-faces '(cursor ((t (:background "SlateGray3")))))
(blink-cursor-mode)

;; Higlight current line
;; Looks good in some themes but not others
;; (global-hl-line-mode 1)

;; Smooth scrolling and keep cursor 10 lines away from top and bottom
(setq scroll-step 1)
(setq-default scroll-margin 10)

;; Visual line mode with chars to show visual wrapping
(custom-set-variables '(visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow)))
(global-visual-line-mode 1)

;; MISC
(custom-set-variables '(vc-follow-symlinks t))
(setq-default fill-column 80)
(custom-set-variables '(indent-tabs-mode nil))
#+end_src
* Evil mode
#+begin_src emacs-lisp :tangle "elisp/evil-config.el"
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

(use-package evil
  :ensure t
  :init (setq evil-want-C-i-jump nil)
  (setq evil-want-C-u-scroll t)
  :config (evil-mode 1)
  (setq evil-insert-state-cursor '((bar . 2) "lime green")
        evil-normal-state-cursor '(box "yellow"))
  (add-hook 'evil-insert-state-exit-hook (lambda () (blink-cursor-mode 0)))
  (add-hook 'evil-insert-state-entry-hook (lambda () (blink-cursor-mode 1)))
  (setq blink-cursor-blinks 0)
  (blink-cursor-mode 0))
#+end_src
